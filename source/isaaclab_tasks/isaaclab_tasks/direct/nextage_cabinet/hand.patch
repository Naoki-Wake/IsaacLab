@@
-    action_space = 22  # controlling only right arm (6) + right hand (20)
-    observation_space = 49
+    # 6 DOF right arm  + 10 controllable right-hand DOF
+    action_space = 16
+    # 16 pos + 16 vel + 3 (Δ grasp) + 1 (drawer q) + 1 (drawer ẋ)
+    observation_space = 37
@@
 # ────────────────────────────────────────────────────────────────────────────────
+# Hand-joint coupling (10-DOF → 16-DOF)
+def couplingRuleTensor(jv: torch.Tensor) -> torch.Tensor:
+    """
+    Expand a [N,10] control vector
+      [FF2, FF3, MF2, MF3, RF2, RF3, TH1, TH2, TH4, TH5]
+    into the 16 physical joint targets expected by the hand URDF/USDA:
+      [FFJ4-1, MFJ4-1, RFJ4-1, THJ5-1] (see stack order below).
+    """
+    ff2, ff3, mf2, mf3, rf2, rf3, th1, th2, th4, th5 = jv.split(1, dim=1)
+    # Coupling rules -----------------------------------------------------------
+    ff1, mf1, rf1 = ff2, mf2, rf2          # proximal = middle
+    ff4 = torch.zeros_like(ff2)
+    mf4 = torch.zeros_like(mf2)
+    rf4 = torch.zeros_like(rf2)
+    # Assemble in the robot’s DOF order ----------------------------------------
+    js = torch.cat(
+        (
+            ff4, ff3, ff2, ff1,            # rh_FFJ4-1
+            mf4, mf3, mf2, mf1,            # rh_MFJ4-1
+            rf4, rf3, rf2, rf1,            # rh_RFJ4-1
+            th5, th4, th2, th1,            # rh_THJ5-1
+        ),
+        dim=1,
+    )
+    return js
@@
-        right_arm_indices = self._robot.find_joints("RARM_JOINT[0-5]")[0]
-        right_hand_indices = self._robot.find_joints("rh_.*")[0]
-        self.control_indices = torch.tensor(right_arm_indices + right_hand_indices, device=self.device)
+        # ── Right-arm DOF indices (6) ──────────────────────────────────────────
+        self.arm_indices = torch.tensor(
+            self._robot.find_joints("RARM_JOINT[0-5]")[0], device=self.device
+        )
+
+        # ── 10 controllable right-hand joints (input to the coupling) ──────────
+        hand_ctrl_names = [
+            "rh_FFJ2", "rh_FFJ3",
+            "rh_MFJ2", "rh_MFJ3",
+            "rh_RFJ2", "rh_RFJ3",
+            "rh_THJ1", "rh_THJ2", "rh_THJ4", "rh_THJ5",
+        ]
+        self.hand_ctrl_indices = torch.tensor(
+            self._robot.find_joints(hand_ctrl_names)[0], device=self.device
+        )
+
+        # ── 16 physical hand joints (output of the coupling) in the *exact*
+        #    order returned by `couplingRuleTensor` ────────────────────────────
+        hand_full_names = [
+            "rh_FFJ4", "rh_FFJ3", "rh_FFJ2", "rh_FFJ1",
+            "rh_MFJ4", "rh_MFJ3", "rh_MFJ2", "rh_MFJ1",
+            "rh_RFJ4", "rh_RFJ3", "rh_RFJ2", "rh_RFJ1",
+            "rh_THJ5", "rh_THJ4", "rh_THJ2", "rh_THJ1",
+        ]
+        self.hand_full_indices = torch.tensor(
+            self._robot.find_joints(hand_full_names)[0], device=self.device
+        )
+
+        # ── Vector of *policy* controllable DOF (6 arm + 10 hand) ─────────────
+        self.control_indices = torch.cat([self.arm_indices, self.hand_ctrl_indices])
@@
-    def _pre_physics_step(self, actions: torch.Tensor):
-
-        self.actions = actions.clone().clamp(-1.0, 1.0)
-        scaled = self.robot_dof_speed_scales[self.control_indices] * self.dt * self.actions * self.cfg.action_scale
-        targets = self.robot_dof_targets[:, self.control_indices] + scaled
-        self.robot_dof_targets[:, self.control_indices] = torch.clamp(
-            targets,
-            self.robot_dof_lower_limits[self.control_indices],
-            self.robot_dof_upper_limits[self.control_indices],
-        )
+    def _pre_physics_step(self, actions: torch.Tensor):
+        """
+        actions[:, :6]   → incremental velocities for the right arm
+        actions[:, 6:]   → incremental velocities for the 10 hand-control DOF
+        The 10-D hand signal is first integrated, then expanded to
+        16-D via `couplingRuleTensor`, and finally written into the *physical*
+        hand joints.
+        """
+        self.actions = actions.clamp(-1.0, 1.0)
+
+        # ── Right arm (6 DOF) ─────────────────────────────────────────────────
+        arm_scaled = (
+            self.robot_dof_speed_scales[self.arm_indices]
+            * self.dt
+            * self.actions[:, :6]
+            * self.cfg.action_scale
+        )
+        self.robot_dof_targets[:, self.arm_indices] = torch.clamp(
+            self.robot_dof_targets[:, self.arm_indices] + arm_scaled,
+            self.robot_dof_lower_limits[self.arm_indices],
+            self.robot_dof_upper_limits[self.arm_indices],
+        )
+
+        # ── Hand control DOF (10) ─────────────────────────────────────────────
+        hand_scaled_ctrl = (
+            self.robot_dof_speed_scales[self.hand_ctrl_indices]
+            * self.dt
+            * self.actions[:, 6:]
+            * self.cfg.action_scale
+        )
+        self.robot_dof_targets[:, self.hand_ctrl_indices] = torch.clamp(
+            self.robot_dof_targets[:, self.hand_ctrl_indices] + hand_scaled_ctrl,
+            self.robot_dof_lower_limits[self.hand_ctrl_indices],
+            self.robot_dof_upper_limits[self.hand_ctrl_indices],
+        )
+
+        # ── Apply coupling to obtain the *16* real finger joints ──────────────
+        full_hand_targets = couplingRuleTensor(
+            self.robot_dof_targets[:, self.hand_ctrl_indices]
+        )
+        self.robot_dof_targets[:, self.hand_full_indices] = torch.clamp(
+            full_hand_targets,
+            self.robot_dof_lower_limits[self.hand_full_indices],
+            self.robot_dof_upper_limits[self.hand_full_indices],
+        )
@@
-                dof_pos_scaled,  # 22
-                self._robot.data.joint_vel[:, self.control_indices] * self.cfg.dof_velocity_scale,  # 22
+                dof_pos_scaled,  # 16
+                self._robot.data.joint_vel[:, self.control_indices] * self.cfg.dof_velocity_scale,  # 16